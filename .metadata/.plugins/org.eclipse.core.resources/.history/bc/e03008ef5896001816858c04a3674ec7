package threads;



import app.AppContext;
import dbTools.DBOperationsProductRequest;
import entities.ProductRequest;
import frames.models.ProductRequestModel;
import tools.MutableBoolean;

public class ProcessProductRequestsThread extends Thread
{
	private static final long SLEEP_BETWEEN_CHECKS = 1000;

	private AppContext context;
	private MutableBoolean stop;
	
	private ProductRequestModel mdlProdReq;

	public ProcessProductRequestsThread( AppContext context, MutableBoolean stop )
	{
		super();

		this.context = context;
		this.stop = stop;
		mdlProdReq=new ProductRequestModel();
	}

	public void run( )
	{
		boolean finished = false;

		ProductRequest pr = null;

		while (!finished)
		{	
			DBOperationsProductRequest.listProductRequests(context, mdlProdReq.getList(),DBOperationsProductRequest.FILTER_TYPE_ALLOCATED);
			List list=mdlProdReq.getList();
			if (pr.getStatus() == ProductRequest.ALLOCATED)
			{

				finished = true;
			}
			else
			{
				try
				{
					sleep(SLEEP_BETWEEN_CHECKS);
				}
				catch (InterruptedException e)
				{
					e.printStackTrace();
				}
			}

			if (stop != null)
			{
				if (stop.isValue())
				{
					finished = true;
					System.out.println("Manually stopped the the product requets allocation.");
				}
			}
		}
	}
}
