package threads;

import java.util.ArrayList;
import java.util.List;

import app.AppContext;
import dbTools.DBOperationsProduct;
import dbTools.DBOperationsProductRequest;
import entities.Product;
import entities.ProductRequest;
import frames.models.ProductRequestModel;
import tools.MutableBoolean;

public class ProcessProductRequestsThread extends Thread
{
	private static final long SLEEP_BETWEEN_CHECKS = 1000;

	private AppContext context;
	private MutableBoolean stop;

	private List<ProductRequest> list;

	public ProcessProductRequestsThread( AppContext context, MutableBoolean stop )
	{
		super();

		this.context = context;
		this.stop = stop;
		list = new ArrayList<>();
	}

	public void run( )
	{
		boolean finished = false;

		while (!finished)
		{
			DBOperationsProductRequest.listProductRequests(context, list, DBOperationsProductRequest.FILTER_TYPE_ALLOCATED);
			for (ProductRequest pr : list)
			{
				if (pr.getStatus() == ProductRequest.ALLOCATED)
				{

					DBOperationsProductRequest.cancelProductRequest(context, pr);
				}
				else
				{
					try
					{
						sleep(SLEEP_BETWEEN_CHECKS);
					}
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
				}
			}
			//Open
			DBOperationsProductRequest.listProductRequests(context, list, DBOperationsProductRequest.FILTER_TYPE_OPEN);
			for (ProductRequest pr : list)
			{
				if (pr.getStatus() == ProductRequest.OPEN)
				{
					int quantityWanted = pr.getQuantity();
					Product prod = DBOperationsProduct.getProduct(context, pr.getProductId());
					if (prod.getQuantity() - quantityWanted >= 0)
					{
						DBOperationsProductRequest.allocateProductRequest(context, pr);
					}

				}
				else
				{
					try
					{
						sleep(SLEEP_BETWEEN_CHECKS);
					}
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
				}
			}
			if (stop != null)
			{
				if (stop.isValue())
				{
					finished = true;
					System.out.println("Manually stopped the the product requets allocation.");
				}
			}
		}
	}
}
